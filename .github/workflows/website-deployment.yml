name: Website Deployment

on:
  push:
    branches:
      - main
    paths:
      - "website/**"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - staging
          - prod

permissions:
  id-token: write
  contents: read

env:
  STACK_NAME: PortfolioInfraStack
  AWS_REGION: us-east-1

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./website

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: website/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build website
        run: npm run build

      - name: Debug build output
        run: |
          echo "Contents of dist directory:"
          ls -la dist/
          echo "Current working directory:"
          pwd

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: website-build
          path: website/dist

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Debug OIDC claims
        run: |
          echo "GitHub SHA: ${{ github.sha }}"
          echo "GitHub ref: ${{ github.ref }}"
          echo "GitHub repository: ${{ github.repository }}"
          echo "Stage: ${{ github.event.inputs.environment || 'dev' }}"

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: website-build
          path: dist

      - name: Debug downloaded artifact
        run: |
          echo "Contents of dist directory after download:"
          ls -la dist/
          echo "Current working directory:"
          pwd

      - name: Deploy website files
        run: |
          STAGE="${{ github.event.inputs.environment || 'dev' }}"
          BUCKET_NAME="portfolio-${STAGE}-${{ secrets.AWS_ACCOUNT_ID }}"

          echo "Deploying to S3..."
          aws s3 sync dist/ "s3://${BUCKET_NAME}" \
            --delete \
            --cache-control "max-age=3600" \
            --exclude ".DS_Store"

          echo "Setting content types..."
          # Set content types for JS files
          find dist/js -type f -name "*.js" | while read file; do
            key=${file#dist/}
            aws s3 cp "s3://${BUCKET_NAME}/${key}" "s3://${BUCKET_NAME}/${key}" \
              --content-type "application/javascript" \
              --metadata-directive REPLACE
          done

          # Set content types for HTML files
          find dist -type f -name "*.html" | while read file; do
            key=${file#dist/}
            aws s3 cp "s3://${BUCKET_NAME}/${key}" "s3://${BUCKET_NAME}/${key}" \
              --content-type "text/html" \
              --metadata-directive REPLACE
          done

          echo "Verifying deployment..."
          aws s3 ls "s3://${BUCKET_NAME}" --recursive

      - name: Invalidate CloudFront
        run: |
          STAGE="${{ github.event.inputs.environment || 'dev' }}"
          echo "Looking for distribution ID for stage: $STAGE"

          # Updated query to match new output key format
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
            --stack-name "PortfolioInfraStack-${STAGE}" \
            --query "Stacks[0].Outputs[?OutputKey=='DistributionId'].OutputValue" \
            --output text)

          echo "Found Distribution ID: $DISTRIBUTION_ID"

          if [ -z "$DISTRIBUTION_ID" ]; then
            echo "Error: Distribution ID not found for stage ${STAGE}"
            exit 1
          fi

          echo "Creating CloudFront invalidation for distribution: ${DISTRIBUTION_ID}"

          if ! aws cloudfront create-invalidation \
            --distribution-id "$DISTRIBUTION_ID" \
            --paths "/*"; then
            echo "Failed to create CloudFront invalidation"
            exit 1
          fi

      - name: Deployment Summary
        run: |
          STAGE="${{ github.event.inputs.environment || 'dev' }}"
          echo "Deployment completed successfully to ${STAGE} environment"
          echo "Timestamp: $(date)"
          echo "Commit: ${{ github.sha }}"
